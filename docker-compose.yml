version: '3.7'
services:
  db:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: 3855-database
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    volumes:
      - zookeeper-data:/opt/zookeeper-3.4.13/data
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /var/lib/kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - ./data/kafka_data:/var/lib/kafka/kafka-logs
    depends_on:
      - zookeeper
    networks:
      - app-network

  receiver:
    build:
      context: ./receiver
      dockerfile: Dockerfile
    deploy:
      replicas: ${RECEIVER_REPLICAS:-3}
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
      - CORS_ALLOW_ALL=no
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
    depends_on:
      - kafka
    networks:
      - app-network

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: storage
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
      - DB_USER=${DB_USER:-user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-3855-database}
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-29092}
      - KAFKA_TOPIC=${KAFKA_TOPIC:-events}
      - CORS_ALLOW_ALL=no
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s

  processing:
    build:
      context: ./processing
      dockerfile: Dockerfile
    container_name: processing
    # No exposed ports - accessed via Nginx
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data/processing:/app/data
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - DATA_PATH=/app/data
      - ENV=${ENV:-dev}
      - CORS_ALLOW_ALL=no
    depends_on:
      - storage
    networks:
      - app-network

  analyzer:
    build:
      context: ./analyzer
      dockerfile: Dockerfile
    container_name: analyzer
    # No exposed ports - accessed via Nginx
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
      - CORS_ALLOW_ALL=no
    depends_on:
      - kafka
    networks:
      - app-network
  
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: dashboard
    ports:
      - "8000:80"
    depends_on:
      - processing
      - analyzer
      - receiver
      - storage
    networks:
      - app-network
      
  consistency_check:
    build:
      context: ./consistency_check
      dockerfile: Dockerfile
    container_name: consistency_check
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data/consistency_check:/app/data
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
      - CORS_ALLOW_ALL=no
    depends_on:
      - processing
      - analyzer
      - storage
    networks:
      - app-network

volumes:
  mysql-data:
  zookeeper-data:

networks:
  app-network:
    driver: bridge