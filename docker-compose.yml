version: '3.7'
services:
  db:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: 3855-database
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /var/lib/kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - ./data/kafka_data:/var/lib/kafka/kafka-logs
    depends_on:
      - zookeeper

  receiver:
    build:
      context: ./receiver
      dockerfile: Dockerfile
    container_name: receiver
    ports:
      - "8081:8081"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
    depends_on:
      - kafka

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    container_name: storage
    ports:
      - "8090:8090"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
      - DB_USER=${DB_USER:-user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-3855-database}
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-9092}
      - KAFKA_TOPIC=${KAFKA_TOPIC:-events}
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started

  processing:
    build:
      context: ./processing
      dockerfile: Dockerfile
    container_name: processing
    ports:
      - "8100:8100"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data/processing:/app/data
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - DATA_PATH=/app/data
      - ENV=${ENV:-dev}
    depends_on:
      - storage

  analyzer:
    build:
      context: ./analyzer
      dockerfile: Dockerfile
    container_name: analyzer
    ports:
      - "8085:8085"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    environment:
      - APP_HOST=0.0.0.0
      - CONFIG_PATH=/app/config
      - ENV=${ENV:-dev}
    depends_on:
      - kafka

volumes:
  mysql-data:
  zookeeper-data: